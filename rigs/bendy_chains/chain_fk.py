import bpy

from rigify.utils.layers import ControlLayersOption

from .chain_bendy_rigs import AlignedChainBendyRig, ParentedBendyChainRig, \
ConnectingChainBendyRig, SegmentedChainBendyRig, MasterControlChainBendyRig

class Rig(
    MasterControlChainBendyRig,
    SegmentedChainBendyRig,
    ParentedBendyChainRig,
    ConnectingChainBendyRig
    ):
    """
    Bendy FK chain
    """

    @classmethod
    def parameters_ui(self, layout, params):
        self.master_control_ui(layout, params)
        self.segmented_fk_ui(layout, params)
        ControlLayersOption.TWEAK.parameters_ui(layout, params)

def create_sample(obj):
    # generated by rigify.utils.write_metarig
    bpy.ops.object.mode_set(mode='EDIT')
    arm = obj.data

    bones = {}

    bone = arm.edit_bones.new('tentacle')
    bone.head = 0.0000, 0.0000, 0.0000
    bone.tail = 0.0000, 0.0000, 0.1000
    bone.roll = 0.0000
    bone.use_connect = False
    bones['tentacle'] = bone.name
    bone = arm.edit_bones.new('tentacle.001')
    bone.head = 0.0000, 0.0000, 0.1000
    bone.tail = 0.0000, 0.0000, 0.2000
    bone.roll = 0.0000
    bone.use_connect = True
    bone.parent = arm.edit_bones[bones['tentacle']]
    bones['tentacle.001'] = bone.name
    bone = arm.edit_bones.new('tentacle.002')
    bone.head = 0.0000, 0.0000, 0.2000
    bone.tail = 0.0000, 0.0000, 0.3000
    bone.roll = 0.0000
    bone.use_connect = True
    bone.parent = arm.edit_bones[bones['tentacle.001']]
    bones['tentacle.002'] = bone.name
    bone = arm.edit_bones.new('tentacle.003')
    bone.head = 0.0000, 0.0000, 0.3000
    bone.tail = 0.0000, 0.0000, 0.4000
    bone.roll = 0.0000
    bone.use_connect = True
    bone.parent = arm.edit_bones[bones['tentacle.002']]
    bones['tentacle.003'] = bone.name
    bone = arm.edit_bones.new('tentacle.004')
    bone.head = 0.0000, 0.0000, 0.4000
    bone.tail = 0.0000, 0.0000, 0.5000
    bone.roll = 0.0000
    bone.use_connect = True
    bone.parent = arm.edit_bones[bones['tentacle.003']]
    bones['tentacle.004'] = bone.name

    bpy.ops.object.mode_set(mode='OBJECT')
    pbone = obj.pose.bones[bones['tentacle']]
    pbone.rigify_type = 'bendy_chains.tentacle'
    pbone.lock_location = (False, False, False)
    pbone.lock_rotation = (False, False, False)
    pbone.lock_rotation_w = False
    pbone.lock_scale = (False, False, False)
    pbone.rotation_mode = 'QUATERNION'
    pbone.bone.layers = [True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
    try:
        pbone.rigify_parameters.bbone_easeout = False
    except AttributeError:
        pass
    try:
        pbone.rigify_parameters.master_control = 'NONE'
    except AttributeError:
        pass
    try:
        pbone.rigify_parameters.bbone_easein = True
    except AttributeError:
        pass
    try:
        pbone.rigify_parameters.tweak_layers = [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
    except AttributeError:
        pass
    pbone = obj.pose.bones[bones['tentacle.001']]
    pbone.rigify_type = ''
    pbone.lock_location = (False, False, False)
    pbone.lock_rotation = (False, False, False)
    pbone.lock_rotation_w = False
    pbone.lock_scale = (False, False, False)
    pbone.rotation_mode = 'QUATERNION'
    pbone.bone.layers = [True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
    pbone = obj.pose.bones[bones['tentacle.002']]
    pbone.rigify_type = ''
    pbone.lock_location = (False, False, False)
    pbone.lock_rotation = (False, False, False)
    pbone.lock_rotation_w = False
    pbone.lock_scale = (False, False, False)
    pbone.rotation_mode = 'QUATERNION'
    pbone.bone.layers = [True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
    pbone = obj.pose.bones[bones['tentacle.003']]
    pbone.rigify_type = ''
    pbone.lock_location = (False, False, False)
    pbone.lock_rotation = (False, False, False)
    pbone.lock_rotation_w = False
    pbone.lock_scale = (False, False, False)
    pbone.rotation_mode = 'QUATERNION'
    pbone.bone.layers = [True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
    pbone = obj.pose.bones[bones['tentacle.004']]
    pbone.rigify_type = ''
    pbone.lock_location = (False, False, False)
    pbone.lock_rotation = (False, False, False)
    pbone.lock_rotation_w = False
    pbone.lock_scale = (False, False, False)
    pbone.rotation_mode = 'QUATERNION'
    pbone.bone.layers = [True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]

    bpy.ops.object.mode_set(mode='EDIT')
    for bone in arm.edit_bones:
        bone.select = False
        bone.select_head = False
        bone.select_tail = False
    for b in bones:
        bone = arm.edit_bones[bones[b]]
        bone.select = True
        bone.select_head = True
        bone.select_tail = True
        bone.bbone_x = bone.bbone_z = bone.length * 0.05
        arm.edit_bones.active = bone

    arm.layers = [(x in [0]) for x in range(32)]

    return bones
