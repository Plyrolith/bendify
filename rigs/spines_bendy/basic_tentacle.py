#====================== BEGIN GPL LICENSE BLOCK ======================
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software Foundation,
#  Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
#
#======================= END GPL LICENSE BLOCK ========================

# <pep8 compliant>

import bpy

from rigify.base_rig import stage
from rigify.utils.naming import strip_org, make_derived_name
from rigify.rigs.widgets import create_ballsocket_widget, create_gear_widget
from rigify.utils.bones import put_bone, set_bone_widget_transform

from .spine_rigs import ConnectingBendyRig

from ...utils.misc import threewise_nozip

class Rig(ConnectingBendyRig):
    """
    Bendy chain
    """
    def initialize(self):
        super().initialize()

        self.copy_rotation_axes = self.params.copy_rotation_axes

    ####################################################
    # Master control

    @stage.configure_bones
    def configure_master_control(self):
        bone = self.get_bone(self.bones.ctrl.master)
        bone.lock_location = (True, True, True)
        bone.lock_scale = (False, True, False)
        if not any(self.copy_rotation_axes):
            bone.lock_location = (True, True, True)
            bone.lock_rotation = (True, True, True)
            bone.lock_rotation_w = True


    @stage.generate_widgets
    def make_master_control_widget(self):
        bone = self.bones.ctrl.master
        if any(self.copy_rotation_axes):
            set_bone_widget_transform(self.obj, bone, self.bones.ctrl.tweak[-1])
            create_ballsocket_widget(self.obj, bone, size=0.7)
        else:
            create_gear_widget(self.obj, bone, size=4)

    ####################################################
    # Control bones

    @stage.rig_bones
    def rig_control_chain(self):
        if any(self.copy_rotation_axes):
            ctrls = self.bones.ctrl.fk
            for ctrl in ctrls:
                self.make_constraint(
                    ctrl, 'COPY_ROTATION', self.bones.ctrl.master,
                    use_xyz=self.copy_rotation_axes,
                    space='LOCAL', mix_mode='BEFORE',
                )
    
    ####################################################
    # SETTINGS

    @classmethod
    def add_parameters(self, params):
        """ Add the parameters of this rig type to the
            RigifyParameters PropertyGroup
        """

        super().add_parameters(params)

        params.copy_rotation_axes = bpy.props.BoolVectorProperty(
            size=3,
            description="Automation axes",
            default=tuple([i == 0 for i in range(0, 3)])
            )


    @classmethod
    def parameters_ui(self, layout, params):
        """ Create the ui for the rig parameters.
        """

        layout.row().label(text="Master Rotation Control")
        row = layout.row(align=True)
        for i, axis in enumerate(['x', 'y', 'z']):
            row.prop(params, "copy_rotation_axes", index=i, toggle=True, text=axis)

        super().parameters_ui(layout, params)

import bpy


from mathutils import Color


def create_sample(obj):
    # generated by rigify.utils.write_metarig
    bpy.ops.object.mode_set(mode='EDIT')
    arm = obj.data

    bones = {}

    bone = arm.edit_bones.new('tentacle')
    bone.head = 0.0000, 0.0000, 0.0000
    bone.tail = 0.0000, 0.0000, 0.1000
    bone.roll = 0.0000
    bone.use_connect = False
    bones['tentacle'] = bone.name
    bone = arm.edit_bones.new('tentacle.001')
    bone.head = 0.0000, 0.0000, 0.1000
    bone.tail = 0.0000, 0.0000, 0.2000
    bone.roll = 0.0000
    bone.use_connect = True
    bone.parent = arm.edit_bones[bones['tentacle']]
    bones['tentacle.001'] = bone.name
    bone = arm.edit_bones.new('tentacle.002')
    bone.head = 0.0000, 0.0000, 0.2000
    bone.tail = 0.0000, 0.0000, 0.3000
    bone.roll = 0.0000
    bone.use_connect = True
    bone.parent = arm.edit_bones[bones['tentacle.001']]
    bones['tentacle.002'] = bone.name
    bone = arm.edit_bones.new('tentacle.003')
    bone.head = 0.0000, 0.0000, 0.3000
    bone.tail = 0.0000, 0.0000, 0.4000
    bone.roll = 0.0000
    bone.use_connect = True
    bone.parent = arm.edit_bones[bones['tentacle.002']]
    bones['tentacle.003'] = bone.name
    bone = arm.edit_bones.new('tentacle.004')
    bone.head = 0.0000, 0.0000, 0.4000
    bone.tail = 0.0000, 0.0000, 0.5000
    bone.roll = 0.0000
    bone.use_connect = True
    bone.parent = arm.edit_bones[bones['tentacle.003']]
    bones['tentacle.004'] = bone.name

    bpy.ops.object.mode_set(mode='OBJECT')
    pbone = obj.pose.bones[bones['tentacle']]
    pbone.rigify_type = 'spines_bendy.basic_tentacle'
    pbone.lock_location = (False, False, False)
    pbone.lock_rotation = (False, False, False)
    pbone.lock_rotation_w = False
    pbone.lock_scale = (False, False, False)
    pbone.rotation_mode = 'QUATERNION'
    try:
        pbone.rigify_parameters.bbones_easeout = True
    except AttributeError:
        pass
    try:
        pbone.rigify_parameters.copy_rotation_axes = [False, False, False]
    except AttributeError:
        pass
    pbone = obj.pose.bones[bones['tentacle.001']]
    pbone.rigify_type = ''
    pbone.lock_location = (False, False, False)
    pbone.lock_rotation = (False, False, False)
    pbone.lock_rotation_w = False
    pbone.lock_scale = (False, False, False)
    pbone.rotation_mode = 'QUATERNION'
    pbone = obj.pose.bones[bones['tentacle.002']]
    pbone.rigify_type = ''
    pbone.lock_location = (False, False, False)
    pbone.lock_rotation = (False, False, False)
    pbone.lock_rotation_w = False
    pbone.lock_scale = (False, False, False)
    pbone.rotation_mode = 'QUATERNION'
    pbone = obj.pose.bones[bones['tentacle.003']]
    pbone.rigify_type = ''
    pbone.lock_location = (False, False, False)
    pbone.lock_rotation = (False, False, False)
    pbone.lock_rotation_w = False
    pbone.lock_scale = (False, False, False)
    pbone.rotation_mode = 'QUATERNION'
    pbone = obj.pose.bones[bones['tentacle.004']]
    pbone.rigify_type = ''
    pbone.lock_location = (False, False, False)
    pbone.lock_rotation = (False, False, False)
    pbone.lock_rotation_w = False
    pbone.lock_scale = (False, False, False)
    pbone.rotation_mode = 'QUATERNION'

    bpy.ops.object.mode_set(mode='EDIT')
    for bone in arm.edit_bones:
        bone.select = False
        bone.select_head = False
        bone.select_tail = False
    for b in bones:
        bone = arm.edit_bones[bones[b]]
        bone.select = True
        bone.select_head = True
        bone.select_tail = True
        bone.bbone_x = bone.bbone_z = bone.length * 0.05
        arm.edit_bones.active = bone

    return bones

if __name__ == "__main__":
    create_sample(bpy.context.active_object)
